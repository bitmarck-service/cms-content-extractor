name: build

on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '*.*'
  pull_request:
  release:
    types:
      - published

env:
  IMAGE_NAME: cms-content-extractor

jobs:
  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  build:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: graalvm/setup-graalvm@v1
        with:
          version: '22.3.0'
          java-version: '17'
          components: 'native-image'
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - uses: sbt/setup-sbt@v1
      - name: SBT Build
        env:
          CI_VERSION: ${{ github.ref }}
        run: |
          sbt "; test; cli/assembly; server/assembly; cli/graalvm-native-image:packageBin"
          mkdir dist
          shopt -s extglob
          mv cli/target/scala-*/*.sh.bat dist/
          mv cli/target/graalvm-native-image/!(*.txt) dist/
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          path: 'dist/*'
          retention-days: 5
      - name: Upload release assets
        if: github.event_name == 'release'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload ${{ github.event.release.tag_name }} dist/* --clobber
      - name: Docker Build
        run: docker build -t "$IMAGE_NAME" --label "runnumber=${GITHUB_RUN_ID}" .
      - name: Log in to GitHub Container Registry
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: ${{ env.GITHUB_TOKEN }}
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
      - name: Push image to GitHub Container Registry
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: ${{ env.GITHUB_TOKEN }}
        run: |
          IMAGE_ID="ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME"

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo "$IMAGE_ID" | tr '[A-Z]' '[a-z]')

          if [[ '${{ github.event_name }}' == 'release' ]]; then
            # Set tags to `latest`
            TAGS=(latest)
            # Strip git ref prefix from version
            VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
            # Strip "v" prefix from tag name
            [[ '${{ github.ref }}' =~ ^refs/tags/v[0-9]+\.[0-9] ]] && VERSION=$(echo "$VERSION" | sed -e 's/^v//')
            # Add version to tags
            [[ "$VERSION" != "main" ]] && TAGS+=("$VERSION")
          else
            # Set tags to commit hash
            TAGS=("${GITHUB_SHA::8}")
          fi

          for TAG in "${TAGS[@]}"; do docker tag "$IMAGE_NAME" "$IMAGE_ID:$TAG"; done
          for TAG in "${TAGS[@]}"; do docker push "$IMAGE_ID:$TAG"; done
  dependency-graph:
    name: Update Dependency Graph
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: sbt/setup-sbt@v1
      - uses: scalacenter/sbt-dependency-submission@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: env.GITHUB_TOKEN && github.event_name != 'pull_request'
